package br.alexandrefaraujo;

import br.alexandrefaraujo.model.CucumberResult;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.maven.plugins.annotations.Parameter;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;
import java.util.stream.Collectors;

class MergeCucumberResultHelper {


    private final String regex;
    private final String cucumberReportFolderPath;

    private String stringJson="";

    MergeCucumberResultHelper(String regex, String cucumberReportFolderPath) {
        this.regex = regex;
        this.cucumberReportFolderPath = cucumberReportFolderPath;
    }

    /**
     *  This method will collect all scenarios files from the same Feature in the report folder, merge and create new files.
     *                                 e.g /child-prj/target/cucumber-report
     * @throws IOException - case empty folder
     */
    void mergeAndCreateFiles() throws IOException {


        List<CucumberResult> results = this.serialize(cucumberReportFolderPath);

        Map<String, List<CucumberResult>> mergedResults = new HashMap<>();

        results.forEach(result -> this.put(mergedResults, result.getName(), result));


        mergedResults.forEach((key,value) -> {
            try {
                CucumberResult result = value.get(0);

                result.setNewUri(this.normalizeUriFilePath(result.getUri()));

                result.setUri(normalizeResultFileName(result.getUri()));

                new ObjectMapper().writeValue(new File(result.getNewUri()), Collections.singletonList(result));

            } catch (IOException e) {
                e.printStackTrace();
            }
        });
    }

    /**
     * This method is will delete all files generated by cucable that contains the pattern _scenario...json
     * You must use this after create new merged files
     * @throws IOException
     */
    void deleteUnusedFiles() throws IOException {

        Files.list(Paths.get(cucumberReportFolderPath))
                .forEach(file -> {
                    String name = file.getFileName().toString();
                    if (name.contains(regex)){
                        try {
                            Files.delete(file);
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                });
    }

    private List<CucumberResult> serialize(String folderPath) throws IOException {

        List<CucumberResult> result = new ArrayList<>();
        this.collectFilesPath(folderPath)
                .forEach(file -> {
                    try {
                        JsonNode node = new ObjectMapper().readTree(file);
                        result.add(new ObjectMapper().readValue(node.get(0).toString(), CucumberResult.class));

                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                });

        return result;
    }


    private List<String> collectFilesPath(String folderPath) throws IOException {

        List<String> jsonContents = new ArrayList<>();

        Files.list(Paths.get(folderPath))
                .forEach(path -> {
                            try {

                                Files.newBufferedReader(path)
                                        .lines()
                                        .collect(Collectors.toList())
                                        .forEach(x -> stringJson += x);

                                jsonContents.add(stringJson);
                                stringJson ="";

                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                );

        return jsonContents;
    }

    private String normalizeUriFilePath(String path){

        String resultFileName = normalizeResultFileName(path);

        resultFileName = resultFileName.substring(resultFileName.lastIndexOf("/"));

        return cucumberReportFolderPath+resultFileName;

    }

    private String normalizeResultFileName(String fileName){
        return fileName.substring(0, fileName.indexOf(regex)) + ".json";//removing scenarion and run number
    }

    private void put(Map<String, List<CucumberResult>> map, String key, CucumberResult value) {

        if (map.get(key) == null) {
            map.put(key, Collections.singletonList(value));
        } else {
            map.get(key).get(0).getElements().addAll(value.getElements());
        }
    }
}
